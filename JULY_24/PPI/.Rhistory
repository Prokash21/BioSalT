# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
View(gene_expression_data)
View(metadata)
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
############################################
# Load libraries
library(umap)
library(ggplot2)
# Example gene expression data
gene_expression_data <- data.frame(
Gene1 = c(2.1, 1.8, 2.5, 2.3, 1.9, 2.0, 2.2, 2.4, 2.7, 2.6),
Gene2 = c(1.5, 2.0, 1.2, 1.7, 1.9, 1.8, 1.6, 1.3, 1.1, 1.4),
Gene3 = c(3.2, 3.5, 3.0, 3.3, 3.1, 3.4, 2.8, 3.6, 2.9, 3.1),
Gene4 = c(0.8, 1.2, 1.0, 0.9, 1.1, 1.3, 0.7, 1.4, 0.8, 1.5),
Gene5 = c(2.9, 3.1, 2.7, 3.0, 2.8, 3.2, 2.5, 3.3, 2.6, 3.4)
)
# Example metadata
metadata <- data.frame(
SampleID = paste0("Sample", 1:10),
Condition = c("Control", "Treatment", "Control", "Treatment", "Treatment",
"Control", "Treatment", "Control", "Control", "Treatment")
)
# Perform UMAP dimensionality reduction
umap_result <- umap(gene_expression_data, n_neighbors = 5, min_dist = 0.5)
# Extract UMAP coordinates and combine with metadata
umap_df <- data.frame(
X1 = umap_result$layout[, 1],  # UMAP component 1
X2 = umap_result$layout[, 2],  # UMAP component 2
metadata
)
# Plot using ggplot2
ggplot(umap_df, aes(x = X1, y = X2, color = Condition)) +
geom_point(size = 3) +
scale_color_manual(values = c("blue", "red")) +  # Define colors for conditions
labs(title = "UMAP Visualization of Gene Expression Data",
x = "UMAP Component 1", y = "UMAP Component 2") +
theme_minimal()
install.packages("ape")
BiocManager::install("ape")
library(ggplot2)
library(ggVennDiagram)
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ggVenn")
data <-read.csv("UP_RNA_ALL.csv")
library(ggplot2)
library(ggVennDiagram)
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ggVenn")
data <-read.csv("UP_RNA_ALL.csv")
library(ggplot2)
library(ggVennDiagram)
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ggVenn")
data <-read.csv("UP_RNA_ALL.csv")
library(ggplot2)
library(ggVennDiagram)
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ggVenn")
data <-read.csv("UP_RNA_ALL.csv")
# Example gene lists
gene_list1 <- data$GSE233233_Zhongza_9
gene_list2 <- data$GSE233233_QZ_006
gene_list3 <- data$Micro_TOM_EX
gene_list4 <- data$Micro_TOM
gene_list5 <- data$X29_X_Boludo
# Create a list of gene lists
gene_lists <- list(
Zhongza_9 = gene_list1,
QZ_006 = gene_list2,
TOM_EX = gene_list3,
Micro_TOM = gene_list4,
X29_X_Boludo = gene_list5
)
# Generate the Venn diagram
ggVennDiagram(gene_lists, label = "count")
X<- ggVennDiagram(gene_lists, label = "count")
X1<- X$layers
########################################################################################
# Load the necessary packages
#install.packages("VennDiagram")
library(VennDiagram)
library(grid)
# Example gene lists from your data
gene_list1 <- data$GSE233233_Zhongza_9
gene_list2 <- data$GSE233233_QZ_006
gene_list3 <- data$Micro_TOM_EX
gene_list4 <- data$Micro_TOM
gene_list5 <- data$X29_X_Boludo
# Create a list of gene lists
gene_lists <- list(
Zhongza_9 = gene_list1,
QZ_006 = gene_list2,
TOM_EX = gene_list3,
Micro_TOM = gene_list4,
X29_X_Boludo = gene_list5
)
# Generate the Venn diagram
venn.plot <- venn.diagram(
x = gene_lists,
category.names = c("Zhongza_9", "QZ_006", "TOM_EX", "Micro_TOM", "X29_X_Boludo"),
filename = NULL,  # to plot in RStudio
output = TRUE,
imagetype = "png",
height = 3000,
width = 3000,
resolution = 300,
compression = "lzw",
lwd = 2,
col = "black",
fill = c("dodgerblue", "goldenrod1", "seagreen3", "darkorchid1", "red"),
cex = 1.5,
fontface = "bold",
fontfamily = "sans",
cat.cex = 1.5,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135, -135, 180),
cat.dist = c(0.055, 0.055, 0.085, 0.085, 0.085),
cat.fontfamily = "sans",
rotation.degree = 1,
euler.d = TRUE,
scaled = TRUE
)
# Plot the Venn diagram
grid.draw(venn.plot)
X<- as.data.frame(venn.plot)
# Calculate the lengths of each gene list and intersections
lengths <- sapply(gene_lists, length)
combinations <- expand.grid(rep(list(c(FALSE, TRUE)), 5))
intersection_lengths <- apply(combinations, 1, function(row) {
selected_lists <- gene_lists[row]
if (all(!row)) {
return(0)
}
Reduce(intersect, selected_lists)
})
# Create a data frame of lengths and intersection lengths
intersection_lengths_df <- data.frame(
Combination = apply(combinations, 1, function(x) paste(names(gene_lists)[x], collapse = ", ")),
Length = sapply(intersection_lengths, length)
)
# Display the data frame
print(intersection_lengths_df)
View(intersection_lengths)
View(intersection_lengths_df)
# Filter out empty intersections and those with less than 3 sets
intersection_df <- intersection_df[intersection_df$Genes != "" & rowSums(combinations) >= 3, ]
# Create a data frame for combinations and intersections
intersection_df <- data.frame(
Combination = apply(combinations, 1, function(x) paste(names(gene_lists)[x], collapse = ", ")),
Genes = sapply(intersection_results, function(x) paste(x, collapse = ", ")),
stringsAsFactors = FALSE
)
# Calculate the intersections
combinations <- expand.grid(rep(list(c(FALSE, TRUE)), length(gene_lists)))
# Function to find the intersection of selected gene lists
find_intersections <- function(row) {
selected_lists <- gene_lists[row]
if (sum(row) < 3) {  # Filter for intersections of at least 3 gene lists
return(character(0))
}
Reduce(intersect, selected_lists)
}
# Apply the function to each combination
intersection_results <- apply(combinations, 1, find_intersections)
# Create a data frame for combinations and intersections
intersection_df <- data.frame(
Combination = apply(combinations, 1, function(x) paste(names(gene_lists)[x], collapse = ", ")),
Genes = sapply(intersection_results, function(x) paste(x, collapse = ", ")),
stringsAsFactors = FALSE
)
# Filter out empty intersections and those with less than 3 sets
intersection_df <- intersection_df[intersection_df$Genes != "" & rowSums(combinations) >= 3, ]
# Display the data frame with intersections of at least 3 gene sets
print(intersection_df)
View(intersection_df)
write.csv(intersection_df,file="At_least_3_datasets_RNA_UP.csv")
# Display the data frame with intersections of at least 3 gene sets
print(intersection_df)
# Create a data frame for combinations and intersections
intersection_df <- data.frame(
Combination = apply(combinations, 1, function(x) paste(names(gene_lists)[x], collapse = ", ")),
Genes = sapply(intersection_results, function(x) paste(x, collapse = ", ")),
stringsAsFactors = FALSE
)
# Filter out empty intersections and those with less than 3 sets
intersection_df <- intersection_df[intersection_df$Genes != "" & rowSums(combinations) >= 3, ]
# Split genes into a list
intersection_list <- strsplit(intersection_df$Genes, ", ")
# Find the maximum length of gene lists
max_length <- max(sapply(intersection_list, length))
# Create a matrix to hold the genes with NA padding
gene_matrix <- do.call(cbind, lapply(intersection_list, function(x) {
c(x, rep(NA, max_length - length(x)))
}))
# Convert the matrix to a data frame and set column names
gene_df <- as.data.frame(gene_matrix, stringsAsFactors = FALSE)
colnames(gene_df) <- intersection_df$Combination
# Display the data frame
print(gene_df)
View(gene_df)
write.csv(intersection_df,file="At_least_3_datasets_RNA_UP_data_frame.csv")
write.csv(gene_df,file="At_least_3_datasets_RNA_UP_data_frame.csv")
library(ggplot2)
library(ggVennDiagram)
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ggVenn")
data <-read.csv("UP_RNA_ALL.csv")
# Example gene lists
gene_list1 <- data$GSE233233_Zhongza_9
gene_list2 <- data$GSE233233_QZ_006
gene_list3 <- data$Micro_TOM_EX
gene_list4 <- data$Micro_TOM
gene_list5 <- data$X29_X_Boludo
# Create a list of gene lists
gene_lists <- list(
Zhongza_9 = gene_list1,
QZ_006 = gene_list2,
TOM_EX = gene_list3,
Micro_TOM = gene_list4,
X29_X_Boludo = gene_list5
)
# Generate the Venn diagram
ggVennDiagram(gene_lists, label = "count")
X<- ggVennDiagram(gene_lists, label = "count")
X1<- X$layers
Three_Least <- read_csv("At_least_3_datasets_RNA_UP_data_frame.csv")
view(Three_Least)
Three_Least <- read_csv("At_least_3_datasets_RNA_UP_data_frame.csv")
library(read)
library(readr)
Three_Least <- read_csv("At_least_3_datasets_RNA_UP_data_frame.csv")
library(readr)
Three_Least <- read_csv("At_least_3_datasets_RNA_UP_data_frame.csv")
entrez <- read_csv("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/ML/Pycaret/Dot_to_Non_Dot_ALL.csv")
View(entrez)
_
Three_Least <- read.csv("At_least_3_datasets_RNA_UP_data_frame.csv")
gene_list1 <- read.csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE233233/DGE_FINAL/June_Run/GSE233233_QZ_006/Converted_ID_UP_GSE233233_QZ_006.csv")
gene_list2 <- read.csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE233233/DGE_FINAL/June_Run/GSE233233_Zhongza_9/Converted_ID_UP_GSE233233_Zhongza_9.csv")
gene_list3 <- read_csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Micro_TOM_EX/Converted_UP_Micro_TOM_EX.csv")
gene_list4 <- read_excel("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Variant/Converted_UP_Micro_TOM.xlsx")
gene_list4 <- read.excel("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Variant/Converted_UP_Micro_TOM.xlsx")
library(readxl)
gene_list4 <- read.excel("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Variant/Converted_UP_Micro_TOM.xlsx")
gene_list4 <- read_excel("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Variant/Converted_UP_Micro_TOM.xlsx")
View(gene_list4)
View(gene_list1)
View(gene_list2)
View(gene_list3)
View(gene_list4)
# Merge gene lists based on the column "To"
merged_gene_list <- merge(gene_list1, gene_list2, by = "To", all = FALSE)  # Inner join gene_list1 and gene_list2
merged_gene_list <- merge(merged_gene_list, gene_list3, by = "To", all = FALSE)  # Inner join with gene_list3
merged_gene_list <- merge(merged_gene_list, gene_list4, by = "To", all = FALSE)  # Inner join with gene_list4
View(merged_gene_list)
# Merge gene lists based on the column "To"
merged_gene_list <- merge(gene_list1, gene_list2, by = "To", all = FALSE)  # Inner join gene_list1 and gene_list2
View(merged_gene_list)
View(gene_list3)
# Read in the CSV files
gene_list1 <- read_csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE233233/DGE_FINAL/June_Run/GSE233233_QZ_006/Converted_ID_UP_GSE233233_QZ_006.csv")[, "To", drop = FALSE]
gene_list2 <- read_csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE233233/DGE_FINAL/June_Run/GSE233233_Zhongza_9/Converted_ID_UP_GSE233233_Zhongza_9.csv")[, "To", drop = FALSE]
gene_list3 <- read_csv("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Micro_TOM_EX/Converted_UP_Micro_TOM_EX.csv")[, "To", drop = FALSE]
# Read in the Excel file and select only the "To" column
gene_list4 <- read_excel("E:/DWCT/M_Analysis_Ajit_Sir/GSE148353/June_Run/June_Run_Variant/Converted_UP_Micro_TOM.xlsx")[, "To", drop = FALSE]
# Merge gene lists based on the column "To"
merged_gene_list <- merge(gene_list1, gene_list2, by = "To", all = FALSE)  # Inner join gene_list1 and gene_list2
merged_gene_list <- merge(merged_gene_list, gene_list3, by = "To", all = FALSE)  # Inner join with gene_list3
merged_gene_list <- merge(merged_gene_list, gene_list4, by = "To", all = FALSE)  # Inner join with gene_list4
# Merge gene lists based on the column "To"
merged_gene_list <- merge(gene_list1, gene_list2, by = "To", all = FALSE)  # Inner join gene_list1 and gene_list2
View(merged_gene_list)
View(merged_gene_list)
View(gene_list1)
View(gene_list2)
View(gene_list4)
# List of data frames to merge
gene_lists <- list(gene_list1, gene_list2, gene_list3, gene_list4)
# Merge data frames based on the column "To"
merged_gene_list <- Reduce(function(x, y) merge(x, y, by = "To", all = FALSE), gene_lists)
View(merged_gene_list)
combined_gene_list <- rbind(gene_list1, gene_list2, gene_list3, gene_list4)
View(combined_gene_list)
write.csv(combined_gene_list,file="PPI_At_Least_Three_UP.csv")
getwd()
setwd("E:/DWCT/M_Analysis_Ajit_Sir/JULY_24/PPI")
Three_Least <- read.csv("At_least_3_datasets_RNA_UP_data_frame.csv")
Three_Least <- read.csv("At_least_3_datasets_RNA_UP_data_frame.csv")
view(Three_Least)
show(Three_Least)
View(Three_Least)
list <- read_csv("PPI_At_Least_Three_UP.csv")
# Extract columns 2 to 17 of Three_Least where values in each column are present in list$V2
selected_genes <- lapply(Three_Least[, 2:17], function(col) col[col %in% list$V2])
View(selected_genes)
# Convert the selected genes into a data frame
selected_genes_df <- as.data.frame(selected_genes)
View(selected_genes_df)
# Extract columns 2 to 17 of Three_Least where values in each column are present in list$V2
selected_genes <- lapply(Three_Least[, 2:17], function(col) col[col %in% list$Edit])
View(selected_genes)
# Convert the selected genes into a data frame
selected_genes_df <- as.data.frame(selected_genes)
View(selected_genes)
# Initialize a list to store the matched values for each column of Three_Least
matched_values <- list()
# Iterate over columns 2 to 17 of Three_Least
for (i in 2:17) {
# Extract values from the first column of list that match with current column of Three_Least
matched_values[[i]] <- list$Edit[list$Edit %in% Three_Least[[i]]]
}
# Convert matched_values into a data frame if needed
matched_values_df <- as.data.frame(matched_values)
View(matched_values)
matched_values[[2]]
View(list)
rr1 <- list[list$Edit %in% Three_Least$Zhongza_9..QZ_006..TOM_EX,]
View(rr1)
rr <- list()
# Loop through columns 2 to 17 of Three_Least
for (i in 2:17) {
# Filter list$Edit based on values in current column of Three_Least
rr[[i - 1]] <- list$Edit[list$Edit %in% Three_Least[[i]]]
}
View(rr)
View(rr)
rr[[10]]
# Initialize an empty vector to store results
result <- vector("list", length = 16)
View(result)
# Loop through columns 2 to 17 of Three_Least
for (i in 2:17) {
# Filter list$Edit based on values in current column of Three_Least
rr <- list$Edit[list$Edit %in% Three_Least[[i]]]
# Store only the first column of rr in the result list
result[[i - 1]] <- rr
}
View(result)
rr1 <- list[list$Edit %in% Three_Least$Zhongza_9..QZ_006..TOM_EX,]
View(rr1)
rr1 <- rr1[-2,]
View(rr1)
rr1 <- rr1[-2,]
View(rr1)
rr1 <- list[list$Edit %in% Three_Least$Zhongza_9..QZ_006..TOM_EX,]
rr1 <- rr1[-2,]
rr1 <- list[list$Edit %in% Three_Least$Zhongza_9..QZ_006..TOM_EX,]
rr1 <- rr1[-2]
View(rr1)
# Initialize an empty list to store results
result <- vector("list", length = 16)
# Loop through columns 2 to 17 of Three_Least
for (i in 2:17) {
# Filter list$Edit based on values in current column of Three_Least
rr <- list$Edit[list$Edit %in% Three_Least[[i]]]
# Exclude the second column from rr (assuming rr has more than one column)
rr <- rr[-2]
# Store rr in the result list
result[[i - 1]] <- rr
}
View(result)
# Initialize an empty list to store results
result <- vector("list", length = 16)
# Loop through columns 2 to 17 of Three_Least
for (i in 2:17) {
# Construct the column name dynamically
column_name <- colnames(Three_Least)[i]
# Filter list$Edit based on values in current column of Three_Least
rr <- list$Edit[list$Edit %in% Three_Least[[column_name]]]
# Exclude the second column from rr (assuming rr has more than one column)
rr <- rr[-2]
# Store rr in the result list
result[[i - 1]] <- rr
}
View(result)
rr1 <- list[list$Edit %in% Three_Least$Zhongza_9..QZ_006..TOM_EX,]
rr1 <- rr1[-2]
View(result)
View(rr1)
